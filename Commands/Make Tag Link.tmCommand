<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby -rjcode -Ku
SUPPORT = ENV['TM_SUPPORT_PATH']
DIALOG = ENV['DIALOG']
require SUPPORT + '/lib/ui'
require SUPPORT + '/lib/escape'
require SUPPORT + '/lib/osx/plist'
require SUPPORT + '/lib/exit_codes'
require ENV['TM_BUNDLE_SUPPORT'] + '/lib/cooldialog'
require 'erb'
require 'net/http'
require 'rexml/document'

input = STDIN.read

def elegant_exit(message)
	TextMate::CoolDialog.cool_tool_tip(message)
	TextMate.exit_discard
end

blogsite = ENV['BLOG_SITE'] ? ENV['BLOG_SITE'] : "www.tuaw.com"
blogsite = "www." + blogsite unless blogsite =~ /^www\./
offset = 0
linktext = TextMate::UI.request_string(:title =&gt; "Search Query",:prompt =&gt; "Enter terms to create a tag link",:default =&gt; input)
elegant_exit("Cancelled") unless linktext

query = linktext + " site:#{blogsite}/tag"

escapedUrl = "http://api.search.live.net/xml.aspx?Appid=6B9E3A4B9F0D8F963A24815A0317BF1DCA3B0E9A&amp;query=#{e_url(query)}&amp;sources=web&amp;web.offset=#{offset}"

xml_data = Net::HTTP.get_response(URI.parse(escapedUrl)).body
doc = REXML::Document.new(xml_data)
bings = []
doc.elements.each('SearchResponse/web:Web/web:Results/web:WebResult') do |result|
	unless (result.elements['web:Title'].text =~ /bloglines|page/)
	  begin
			tag_title = result.elements['web:Title'].text.gsub(/ -- TUAW/,'').gsub('"','&amp;raquo;').gsub("'",'&amp;rsquo;')
	    bings &lt;&lt; {
	      'title' =&gt; tag_title,
	      'url' =&gt; result.elements['web:Url'].text
	    }
	  rescue
	    TextMate.exit_show_tool_tip "Error in returned data"
	  end
	end
end

elegant_exit("No related tags found in index") if bings.empty?

plist = { 'menuItems' =&gt; bings }.to_plist
res = OSX::PropertyList.load(`#{e_sh DIALOG} -up #{e_sh plist}`)
unless res.has_key? 'selectedMenuItem'
	if ENV['TM_CURRENT_LINE'] =~ /^\[/
	    TextMate.exit_insert_text "]: "
	else
		elegant_exit('cancelled')
	end
end
url = res['selectedMenuItem']['url']
title = res['selectedMenuItem']['title']

TextMate.exit_replace_text url if ENV['TM_CURRENT_LINE'] =~ /^link: #{input}/
if (input.empty? &amp;&amp; !(ENV['TM_SCOPE'].scan(/markdown/).empty?) &amp;&amp; ENV['TM_CURRENT_LINE'] =~ /^(\s+)?$/) || ENV['TM_CURRENT_LINE'] =~ /^(#{input})?(\s+)?$/
	input = "tag" + title.chomp.gsub(/\s+/,"_")
	print ERB.new(ENV['TM_REF_LINK_FORMAT']).result
else
    print ERB.new(ENV['TM_BLINK_FORMAT']).result
end
</string>
	<key>fallbackInput</key>
	<string>word</string>
	<key>input</key>
	<string>selection</string>
	<key>keyEquivalent</key>
	<string>^@w</string>
	<key>name</key>
	<string>Make Tag Link</string>
	<key>output</key>
	<string>insertAsSnippet</string>
	<key>scope</key>
	<string>text.html, text.html.markdown, text.html.markdown.multimarkdown, text.html.textile, text.bbcode, text.moinmoin, text.restructuredtext</string>
	<key>tabTrigger</key>
	<string>tag</string>
	<key>uuid</key>
	<string>66D64733-D941-4B0B-AFA1-497C77BB03F1</string>
</dict>
</plist>
