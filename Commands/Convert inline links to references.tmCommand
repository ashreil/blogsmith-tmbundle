<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby
# require "#{ENV['TM_BUNDLE_SUPPORT']}/lib/linkage"
%w[exit_codes escape].each do |filename|
  require "#{ENV['TM_SUPPORT_PATH']}/lib/#{filename}"
end
def find_headers(lines)
    in_headers = false
    lines.each_with_index {|line, i|
        if line =~ /^\S[^\:]+\:( .*?)?$/
            in_headers = true
        elsif in_headers === true
            return i
        end
    }
end

input = STDIN.read
links = input.scan(/\((https?:\/\/([^\)]+))\)/)
refs = input.scan(/^\[([^\]]+)\]: (\S+)$/)
lines = input.split("\n")

lineno = find_headers(lines)
top = lines[0..lineno].join("\n")
bottom = lines[lineno+1].gsub(/^\[([^\]]+)\]: (\S+)\n?/,'') =~ /^([\n\s\t]+)?$/ ? "" : "\n"
bottom += lines[lineno+1..-1].join("\n").gsub(/^\[([^\]]+)\]: (\S+)\n?/,'')

norepeat = []
norepeatlinks = []
output = []

refs.each {|ref|
	name = ref[0]
	next if norepeatlinks.include? ref[1]
	while norepeat.include? name
		if name =~ / ?[0-9]$/
			name.next!
		else 
			name = name + " 2"
		end
	end
	output &lt;&lt; {'orig' =&gt; ref[0], 'title' =&gt; name, 'link' =&gt; ref[1]}
	norepeat.push name
	norepeatlinks.push ref[1]
}

links.each {|url| 
		next if norepeatlinks.include? url[0]
		domain = url[0].match(/https?:\/\/([^\/]+)/)
		parts = domain[1].split('.')
		name = case parts.length
			when 1: parts[0]
			when 2: parts[0]
			else parts[1]
		end
	while norepeat.include? name
		if name =~ / ?[0-9]$/
			name.next!
		else 
			name = name + " 2"
		end
	end
	output &lt;&lt; {'orig' =&gt; url[0], 'title' =&gt; name, 'link' =&gt; url[0] }
	norepeat.push name
	norepeatlinks.push url[0]
}
output = output.sort {|a,b| a['title'] &lt;=&gt; b['title']}
o = []

output.each_with_index { |x,i| 
	o.push("[#{x['title']}]: #{x['link']}")
	bottom = bottom.gsub(/\((#{e_sh x['orig']}|#{e_sh x['link']})\)/,"[#{x['title']}]").gsub(/\[#{e_sh x['orig']}\]/,"[#{x['title']}]")
}
puts top + "\n#{o.join("\n")}\n" + bottom</string>
	<key>fallbackInput</key>
	<string>word</string>
	<key>input</key>
	<string>document</string>
	<key>keyEquivalent</key>
	<string>^@w</string>
	<key>name</key>
	<string>Convert inline links to references</string>
	<key>output</key>
	<string>replaceDocument</string>
	<key>scope</key>
	<string>text.html.markdown.multimarkdown, text.html.markdown</string>
	<key>uuid</key>
	<string>0FBC7BF9-DF58-4AA3-880E-3266F221A339</string>
</dict>
</plist>
